articleList = append(articleList, data[i])
}
articleList
article[1]
corpusList[1]
corpusList[2]
corpusList[1]
corpusList[1:50]
articleList
articleList[1]
articleList[2]
articleList[3]
articleList[[1]]
articleList[[5]]
corpusList = list()
articleList = list()
corpusIndex = 0
articleIndex = 0
for (i in seq(100)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList[corpusIndex] = articleList
corpusIndex += 1
articleIndex = 0
articleList = list()
}
articleList[articleIndex] = data[i]
articleIndex += 1
}
corpusList = list()
articleList = list()
corpusIndex = 0
articleIndex = 0
for (i in seq(100)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList[corpusIndex] = articleList
corpusIndex = corpusIndex +  1
articleIndex = 0
articleList = list()
}
articleList[articleIndex] = data[i]
articleIndex = articleIndex + 1
}
corpusList[1]
corpusList
corpusList
corpusList = list()
articleList = list()
articleIndex = 0
for (i in seq(100)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
list.append(corpusList, articleList)
articleIndex = 0
articleList = list()
}
list.append(articleList, data[i])
}
install.packages(rlist)
install.packages("rlist")
library(rlist)
corpusList = list()
articleList = list()
articleIndex = 0
for (i in seq(100)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
list.append(corpusList, articleList)
articleIndex = 0
articleList = list()
}
list.append(articleList, data[i])
}
corpusList[1]
corpusList
articleList
x = c(1,2,3)
x = list()
append(x, list(1,2,3))
corpusList = list()
articleList = list()
currInd = 0
for (i in seq(100)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList = append(corpusList[currInd], articleList)
currInd = currInd + 1
}
articleList = append(articleList, data[i])
}
corpusList[[1]]
corpusList
corpusList[2]
corpusList[1]
corpusList[3]
corpusList[[1]]
corpuslist[[2]]
corpusList[[2]]
corpusList[[5]]
length(corpusList)
x = list(1,2,3)
y = list(5,6,7)
x
y
z = list()
append(z, x)
length(z)
z = append(z,x)
length(z)
z = list
z = list()
z
z[1] <- x
z
z[[1]] <- x
z
x[1]
z[[1]]
corpusList = list()
articleList = list()
currInd = 0
for (i in seq(100)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList[[currInd]] <- articleList
articleList <- list();
currInd <- currInd + 1
}
articleList = append(articleList, data[i])
}
corpusList = list()
articleList = list()
currInd = 1
for (i in seq(100)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList[[currInd]] <- articleList
articleList <- list();
currInd <- currInd + 1
}
articleList = append(articleList, data[i])
}
corpusList[1]
corpusList[2]
corpusList = list()
articleList = list()
currInd = 1
for (i in seq(100)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList[[currInd]] <- articleList
articleList <- list();
currInd <- currInd + 1
} else {
articleList = append(articleList, data[i])
}
}
corpusList[1]
corpusList[2]
corpusList = list()
articleList = list()
currInd = 1
for (i in length(data)){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList[[currInd]] <- articleList
articleList <- list();
currInd <- currInd + 1
} else {
articleList = append(articleList, data[i])
}
}
length(corpusList)
corpusList[1]
corpusList = list()
articleList = list()
currInd = 1
for (i in seq(length(data))){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList[[currInd]] <- articleList
articleList <- list();
currInd <- currInd + 1
} else {
articleList = append(articleList, data[i])
}
}
length(corpusList)
corpusList[100]
setwd("./saved_Object/")
# read in the documentList
#documentList <- lapply(file_list, read_rtf)
# just read the r data instead
documentList = load("./documentList.rds")
# read in the documentList
#documentList <- lapply(file_list, read_rtf)
# just read the r data instead
documentList = readRDS("documentList.rds")
text2Corpus <- function(data){
# Organize the data, parse each element as an element of corpusList
corpusList = list()
articleList = list()
currInd = 1
for (i in seq(length(data))){
# if reach end of document, move on to another list element
if(data[i] == "End of Document"){
corpusList[[currInd]] <- articleList
articleList <- list();
currInd <- currInd + 1
} else {
articleList = append(articleList, data[i])
}
}
# Further organize data, organize them into corpus
dateList <- character()
sectionList <- character()
bodyList <- character()
for(elem in corpusList){
dateList <- append(dateList, elem[[2]])
sectionList <- append(sectionList, elem[[4]])
# construct the body string
bodyStr <- ""
startPt <- which(elem == "Body") + 1
endPt <- length(elem)
for(i in seq(startPt, endPt)){
bodyStr <- str_c(bodyStr, elem[[i]])
}
bodyList <- append(bodyList, bodyStr)
}
# clean the date into the format we wanted
date_regEx <- "[A-Z|a-z]+\\s\\d{1,2},\\s\\d{4}\\s"
dateList <- str_extract(dateList, date_regEx)
corp_NYT <- corpus(bodyList)
docvars(corp_NYT, "Date") <- dateList
docvars(corp_NYT, "Section") <- sectionList
return(corp_NYT)
}
corpusList <- lapply(documentList, text2Corpus)
library("tidyverse")
library("quanteda")
library("striprtf")
library(readtext)
library("textreadr")
corpusList <- lapply(documentList, text2Corpus)
corpus = nullfile()
for(i in seq(length(corpusList))){
corpus = corpus + corpusList[[i]]
}
corpus = corpusList[1]
for(i in seq(2, length(corpusList))){
corpus = corpus + corpusList[[i]]
}
summary(corpus)
corpus = corpusList[[1]]
for(i in seq(2, length(corpusList))){
corpus = corpus + corpusList[[i]]
}
summary(corpus)
saveRDS(corpus, "corpus.rds")
library("tidyverse")
library("tidyverse")
library("quanteda")
library("striprtf")
library(readtext)
library("textreadr")
devtools::install_github("kbenoit/quanteda.dictionaries")
source('~/UCSD/Fall 2019/research/src/exploratory_analysis.r', echo=TRUE)
getwd()
setwd("C://Users//Chi Gao//Documents//UCSD//Fall 2019//research//saved_Object/")
getwd()
corpus <- loadRDS("./corpus.rds")
corpus <- readRDS("./corpus.rds")
getwd()
setwd("C://Users//Chi Gao//Documents//UCSD//Fall 2019//research//saved_Object/")
getwd()
setwd("C://Users//Chi Gao//Documents//UCSD//Fall 2019//research//saved_Object/")
corpus <- readRDS("./corpus.rds")
summary(corpus)
install.packages(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("kbenoit/quanteda.dictionaries")
library("quanteda.dictionaries")
output_lsd <- liwcalike(corpus)
output_lsd <- liwcalike(corpus, dictionary = data_dictionary_NRC)
head(output_lsd)
output <- liwcalike(corpus, dictionary = data_dictionary_NRC)
dictionary_output <- liwcalike(corpus, dictionary = data_dictionary_NRC)
head(dictionary_output)
?liwcalike
ggplot
colnames(dictionary_output)
?mutate
dictionary_output <-
dictionary_output %>%
mutate(id = row_number)
dictionary_output <-
dictionary_output %>%
mutate(id = row_number())
head(dictionary_output)
ggplot(dictionary_output, aes(id, anger)) +
geom_point()
dfm_data <- dfm(corpus)
dfm_data <- dfm(corpus, remove = stopwords("english"), stem = TRUE, remove_punct = TRUE)
textplot_wordcloud()
textplot_wordcloud(dfm_data, min_count = 6, random_order = FALSE,
rotation = .25,
color = RColorBrewer::brewer.pal(8, "Dark2"))
summary(corpus)
x <- vector("numeric")
typeof(x)
x <- vector("character")
typeof(x)
x = vector("numeric")
x
cp <- seq(1,1000000,100)
cp <- seq(1,1000000,1000)
cp <- seq(1,1000000,1000)
?seq
for(i in seq(1,100)){}
id_list = vector("integer")
for(i in seq(1,100)){id_list[i]=i}
id_list
c(1,4,7)
x <- c(1,4,7)
2 in x
2 %in% x
2 %in% x
x
cp
id_list = vector("integer")
id = 0
for(i in seq(1,1000000)){
if(i in cp){
id = id + 1
}
id_list[i] <- id
}
id_list = vector("integer")
id = 0
for(i in seq(1,1000000)){
if(i %in% cp){
id = id + 1
}
id_list[i] <- id
}
id_list[1:3000]
id_list[2000:3000]
cp
x <- c(4,6,7,9)
x
typeof(x)
2 %in% x
4 %in% x
# 1979, 1984, 1989, 1994, 1999, 2004, 2009, 2014, 2017
april <- c(35, 31, 30, 30, 27, 25, 25, 20)
dec <- c(17,15,15, 14, 11, 10, 7, 7,5)
library(ggplot)
library(ggplot2)
year <- c(1979, 1984, 1989, 1994, 1999, 2004, 2009, 2014, 2017)
data <- tibble(April=april, December=dec, Year=year)
library(tidyverse)
data <- tibble(April=april, December=dec, Year=year)
data
df <- tibble(April=april, December=dec, Year=year)
# 1979, 1984, 1989, 1994, 1999, 2004, 2009, 2014, 2017
april <- c(35, 31, 30, 30, 27, 25, 25,23, 20)
dec <- c(17,15,15, 14, 11, 10, 7, 7,5)
year <- c(1979, 1984, 1989, 1994, 1999, 2004, 2009, 2014, 2017)
df <- tibble(April=april, December=dec, Year=year)
df
df <-
df %>%
gather("April", "December", key = "month", value="Ice")
df
ggplot(aes(Year, Ice, color=month)) +
geom_line()
ggplot(df, aes(Year, Ice, color=month)) +
geom_line()
df <-
df %>%
gather("April", "December", key = "month", value="Sea_Ice_Extent")
df <- tibble(April=april, December=dec, Year=year)
df <-
df %>%
gather("April", "December", key = "month", value="Sea_Ice_Extent")
ggplot(df, aes(Year, Sea_Ice_Extent, color=month)) +
geom_line()
df <- tibble(April=april, December=dec, Year=year)
df <-
df %>%
gather("April", "December", key = "month", value="Sea_ice_extent")
ggplot(df, aes(Year, Sea_Ice_Extent, color=month)) +
geom_line()
ggplot(df, aes(Year, Sea_ice_extent, color=month)) +
geom_line()
>lab
?lab
?label
?lable
ggplot(df, aes(Year, Sea_ice_extent, color=month)) +
geom_line() +
labs(title="Sea Ice Extent from 1979 to 2017")
?labs
ggplot(df, aes(Year, Sea_ice_extent, color=month)) +
geom_line() +
labs(title="Sea Ice Extent from 1979 to 2017") +
xlab("Sea Ice Extent (10^3km^3)") +
ylab("Year")
ggplot(df, aes(Year, Sea_ice_extent, color=month)) +
geom_line() +
labs(title="Sea Ice Extent from 1979 to 2017") +
ylab("Sea Ice Extent (10^3km^3)") +
xlab("Year")
df <- tibble(April=april, September=September, Year=year)
df <-
df %>%
gather("April", "December", key = "month", value="Sea_ice_extent")
ggplot(df, aes(Year, Sea_ice_extent, color=month)) +
geom_line() +
labs(title="Sea Ice Extent from 1979 to 2017") +
ylab("Sea Ice Extent (10^3km^3)") +
xlab("Year")
September <- c(17,15,15, 14, 11, 10, 7, 7,5)
df <- tibble(April=april, September=September, Year=year)
df <-
df %>%
gather("April", "December", key = "month", value="Sea_ice_extent")
ggplot(df, aes(Year, Sea_ice_extent, color=month)) +
geom_line() +
labs(title="Sea Ice Extent from 1979 to 2017") +
ylab("Sea Ice Extent (10^3km^3)") +
xlab("Year")
df <-
df %>%
gather("April", "September", key = "month", value="Sea_ice_extent")
ggplot(df, aes(Year, Sea_ice_extent, color=month)) +
geom_line() +
labs(title="Sea Ice Extent from 1979 to 2017") +
ylab("Sea Ice Extent (10^3km^3)") +
xlab("Year")
install.packages("spacyr")
library("spacyr")
spacy_install()
library(spacyr)
spacy_install()
spacy_install()?
q
quit
spacy_install?
quit
?spacy_install
spacy_install()
conda
conda <- reticulate::conda_binary(conda)
if (!(envname %in% reticulate::conda_list(conda = conda)$name)) {
message("Conda evnronment", envname, "does not exist")
}
conda <- tryCatch(reticulate::conda_binary(conda), error = function(e) NULL)
conda
have_conda <- !is.null(conda)
conda
spacy_install()
spacy_install_virtualenv()
library(reticulate)
conda_create("test_env")
use_condaenv("test_env")
spacy_install()
spacy_initialize()
spacy_initialize()
spacy_initialize()
spacy_initialize()
py_config()
spacy_initialize()
library(spacy)
library(spacyr)
spacy_initialize()
librar(os)
library(os)
spacy_initialize()
spacy_initialize()
spacy_initialize()
library(spacyr)
spacy_initialize()
install.packages("udpipe")
library(udpipe)
?udpipe
?set.seed
?rand
?random
set.seed(8)
rnorm(1)
set.seed(8)
rnorm(1)
set.seed(8)
rnorm(1)
set.seed(8)
rnorm(1)
set.seed(10)
rnorm(1)
set.seed(10)
rnorm(1)
set.seed(10)
rnorm(1)
#set.seed(10)
rnorm(1)
#set.seed(10)
rnorm(1)
```{r}
#set.seed(10)
rnorm(1)
